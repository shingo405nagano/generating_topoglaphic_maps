# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TopoMaps
                                 A QGIS plugin
 DTMから地形図を生成
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-26
        git sha              : $Format:%H$
        copyright            : (C) 2024 by ShingoNagano
        email                : shingosnaganon@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
os.chdir(os.path.dirname(__file__))

from matplotlib import pyplot as plt
import numpy as np
from osgeo import gdal
from PyQt5.QtCore import pyqtSignal
from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtCore import QSettings
from qgis.PyQt.QtCore import QThread
from qgis.PyQt.QtCore import QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

from .apps.colors import Coloring
from .apps.exeptions import ExeptionMessage
from .apps.my_log import MyLogger
from .apps.mapper import composite_images
from .apps.mapper import save_image_rgba
from .apps.parts import process
from .resources import *
from .topo_maps_dialog import TopoMapsDialog
coloring = Coloring()


class TopoMaps:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        self.dlg = TopoMapsDialog()
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        if locale == 'ja':
            lang = 'ja'
        else:
            lang = 'en'
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            f"topo_maps_{lang}.qm"
        )
        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Topo Maps')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API."""
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Topo Maps', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None
    ):
        """Add a toolbar icon to the toolbar."""
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = ':/plugins/generate_topography/views/icon.png'
        self.add_action(
            icon_path,
            text='Topo Maps',
            callback=self.run,
            parent=self.iface.mainWindow()
        )
        # will be set False in run()
        self.first_start = True
    
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Generating Topographic map'),
                action
            )
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
        else:
            self.dlg = None
        self.dlg = TopoMapsDialog()
        self.my_log = MyLogger(self.dlg)
        # show the dialog
        self.dlg.show()
        # 微地形図の作成
        self.dlg.pushBtn_Execute.clicked.connect(self.execute_algorithom)

    def execute_algorithom(self):
        # 問題がある場合は処理を中止
        msg = ExeptionMessage(self.dlg)
        if not msg.check_input_file_path:
            self.my_log.stop_process()
            return 
        if not msg.check_output_file_path:
            self.my_log.stop_process()
            return
        if not msg.check_raster_band:
            self.my_log.stop_process()
            return
        
        # Rasterのサイズによっては処理が重くなるため、QThreadで処理を行う
        worker = Worker()
        worker.progress.connect(self.dlg.progressBar.setValue)
        worker.start()
        composited_img, org_dst = worker.run(self.dlg, self.my_log)
        if composited_img is None:
            self.my_log.stop_process()
            a = 100
            return
        
        if self.dlg.checkBox_Sample.isChecked():
            # Sampleにチェックが入っている場合は、画像を表示し、保存しない
            self.my_log.show_sample_img
            img = np.array(composited_img)
            plt.title('Sample Image', fontweight='bold', fontsize=18)
            plt.imshow(img)
            plt.axis('off')
            plt.show()
        else:
            # Rasterの保存
            output_file_path = self.dlg.get_output_file_path
            self.my_log.write_raster_log(
                save_image_rgba,
                output_file_path,
                composited_img,
                org_dst
            )
            self.my_log.add_lyr_log(self.dlg.add_lyr, output_file_path)
            self.dlg.progressBar.setValue(100)


class Worker(QThread):
    progress = pyqtSignal(int)

    def run(self, dlg, my_log):
        """微地形図計算のメイン処理"""
        my_log.start_log()
        dlg.write_options()
        self.progress.emit(0)
        # Rasterの読み込み
        org_dst = gdal.Open(dlg.get_input_file_path)
        # RasterSizeをLogに書き込む
        my_log.input_raster_size()
        my_log.show_input_data(org_dst)
        self.progress.emit(2)

        # リサンプルの実行
        org_dst = my_log.resample_log(
            dlg.first_perform_resample,
            org_dst
        )
        msg = ExeptionMessage(dlg)
        if not msg.yes_no(org_dst):
            # ファイルサイズが大きい場合は処理を続けるか確認
            return None, None
        
        if dlg.checkBox_StartResample.isChecked():
            # リサンプルした場合はもう一度RasterSizeをLogに書き込む
            my_log.show_input_data(org_dst)
        self.progress.emit(5)

        if dlg.checkBox_Sample.isChecked():
            # サンプルのを表示するだけの場合は、Rasterのサイズを縮小する
            org_dst = my_log.clipping_raster_log(
                process.get_sample_raster,
                org_dst
            )
        self.progress.emit(10)
        
        # 傾斜の計算とRGBA化
        slope_options = dlg.get_slope_options()
        slope_img = my_log.slope_log(
            slope_options.to_slope_img,
            org_dst,
            progress=self.progress
        )
        # TPI の計算とRGBA化
        tpi_options = dlg.get_tpi_options()
        tpi_img = my_log.tpi_log(
            tpi_options.to_tpi_img,
            org_dst,
            progress=self.progress
        )
        # TRI の計算とRGBA化
        tri_options = dlg.get_tri_options()
        tri_img = my_log.tri_log(
            tri_options.to_tri_img,
            org_dst,
            progress=self.progress
        )
        # Hillshade の計算とRGBA化
        hillshade_options = dlg.get_hillshade_options()
        hillshade_img = my_log.hillshade_log(
            hillshade_options.to_hillshade_img,
            org_dst,
            progress=self.progress
        )
        # 透過率の変更
        defalut_alpha = 100
        if dlg.spinBoxInt_SlopeAlpha.value() != defalut_alpha:
            alpha = dlg.spinBoxInt_SlopeAlpha.value() * 0.01
            slope_img = dlg.change_alpha(slope_img, alpha)
        if dlg.spinBoxInt_TpiAlpha.value() != defalut_alpha:
            alpha = dlg.spinBoxInt_TpiAlpha.value() * 0.01
            tpi_img = dlg.change_alpha(tpi_img, alpha)

        # 画像の合成
        composited_img = my_log.composite_log(
            composite_images,
            dlg,
            slope_img,
            tpi_img,
            tri_img,
            hillshade_img
        )
        self.progress.emit(97)
        return composited_img, org_dst
