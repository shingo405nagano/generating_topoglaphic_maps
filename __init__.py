# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeneratingTopography
                                 A QGIS plugin
 DTMから地形図を生成
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-08-26
        copyright            : (C) 2024 by ShingoNagano
        email                : shingosnaganon@gmail.com
        git sha              : $Format:%H$
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
 This script initializes the plugin, making it known to QGIS.
"""
import subprocess
import os
import tempfile

import glob
from qgis.core import QgsMessageLog, Qgis
from qgis.PyQt.QtWidgets import QMessageBox
# Debugging in VSCode
import debugpy
import shutil
import sys

# sys.path.append('C:\\Users\\makis\\.vscode\\extensions\\ms-python.python-2024.14.1-win32-x64\\python_files\\lib\\python')

# debugpy.configure(python=shutil.which("python"))
# try:
# 	debugpy.listen(("localhost", 5656))
# except:
# 	debugpy.connect(("localhost", 5656))
# # END Debugging in VSCode

# -- Install packages --#
install_packages = []
try:
	import shapely
except Exception:
	install_packages.append('shapely')
try:
	import pandas
except Exception:
	install_packages.append('pandas')
try:
	import geopandas
except Exception:
	install_packages.append('geopandas')

if install_packages:
    front = "<p style='font-size: 15px;'>"
    back = "</p>"
    msg_txt = (
        f"{front}"
        f"This plugin requires {str(install_packages)} to work. Do you want to install it?<br><br>" 
        "The installation will take some time, so please do not touch it and wait. <br><br>"
        "If not, launch 'osgeo shell' and install it manually."
        f"{back}"
    )
    reply = QMessageBox.question(
        None,
        'Message',
        msg_txt,
        QMessageBox.Yes | QMessageBox.No,
        QMessageBox.No
    )
    if reply:
        success_packages = []
        error_packages = []
        for package in install_packages:
            result = subprocess.run(
                ['python', '-m', 'pip', 'install', package], \
                capture_output=True, 
                text=True
            )
            install_process = result.stdout
            success = "Successfully installed" in install_process
            if success:
                success_packages.append(package)
            else:
                error_packages.append(package)
        if len(success_packages) == len(install_packages):
            msg_txt = (
                f"{front}"
                f"Successfully installed {str(install_packages)}."
                f"{back}"
            )
            QMessageBox.information(None, 'OK !', msg_txt)
        else:
            msg_txt = (
                f"{front}"
                f"Failed to install {str(error_packages)}. Please install manually."
                f"{back}"
            )
            QMessageBox.critical(None, 'Error', msg_txt)


# noinspection PyPep8Naming
def classFactory(iface):  # pylint: disable=invalid-name
    """Load GeneratingTopography class from file GeneratingTopography.

    :param iface: A QGIS interface instance.
    :type iface: QgsInterface
    """
    #
    from .topo_maps import TopoMaps
    return TopoMaps(iface)


def clean_temp_topomaps():
    temp_dir = tempfile.gettempdir()
    topo_maps_files = glob.glob(os.path.join(temp_dir, "*_topoMaps.tif"))
    for file_path in topo_maps_files:
        try:
            os.remove(file_path)
        except OSError as e:
            print(f"Error deleting file {file_path}: {e}")

clean_temp_topomaps()
